# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: runs the test suite on ubuntu with stable and beta rust toolchains
# - minimal: runs the test suite with the minimal versions of the dependencies that satisfy the
#   requirements of this crate, and its dependencies
# - os-check: runs the test suite on mac and windows
# - coverage: runs the test suite and collects coverage information
# See check.yml for information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: fuzz
jobs:
  coverage:
    # use llvm-cov to build and collect coverage and outputs in a format that
    # is compatible with codecov.io
    #
    # note that codecov as of v5 requires that CODECOV_TOKEN from
    #
    #   https://app.codecov.io/gh/<user or org>/<project>/settings
    #
    # is set in two places on your repo:
    #
    # - https://github.com/jonhoo/guardian/settings/secrets/actions
    # - https://github.com/jonhoo/guardian/settings/secrets/dependabot
    #
    # (the former is needed for codecov uploads to work with Dependabot PRs)
    #
    # PRs coming from forks of your repo will not have access to the token, but
    # for those, codecov allows uploading coverage reports without a token.
    # it's all a little weird and inconvenient. see
    #
    #   https://github.com/codecov/feedback/issues/112
    #
    # for lots of more discussion
    runs-on: ubuntu-latest
    name: ubuntu / nightly / ${{ matrix.fuzz-target }} / coverage
    strategy:
      fail-fast: false
      matrix:
        fuzz-target: [fuzz_target_1]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@master
        with:
          components: llvm-tools-preview
          toolchain: nightly
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - run: cargo install cargo-fuzz
      - run: cargo check
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo fuzz
        run: |
          ls *
          cd fuzz
          cargo +nightly fuzz run --release ${{ matrix.fuzz-target }} -- -max_total_time=300

      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
